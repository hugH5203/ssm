<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>

  <!--配置spring监听器，监听器会在servlet容器加载时开始监听，容器消亡后停止监听，用监听器的特性来加载spring配置文件，
  但是该实现类默认只加载WEB-INF下的文件，但是我们可以设置该加载变量-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring.xml</param-value>       <!--让监听器运行的同时开始加载spring的配置文件-->
  </context-param>

  <!--解决中文乱码的过滤器-->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <servlet>
    <servlet-name>dispatcherServlet</servlet-name> <!--配置前端控制器，连接所有组件的桥梁，起到交互作用，还能拦截除所有静态资源-->
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:springMVC.xml</param-value>  <!--读取springMVC的配置文件-->
    </init-param>
    <load-on-startup>1</load-on-startup>   <!--tomcat启动时就创建servlet容器，而不是要等到第一次访问才创建-->
  </servlet>

  <servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <url-pattern>/</url-pattern>  <!--“/”是拦截除jsp以外的所有静态资源，"/*"是拦截一切带有后缀的资源包括jsp-->
  </servlet-mapping>
</web-app>
